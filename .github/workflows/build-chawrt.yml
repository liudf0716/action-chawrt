name: Compile chawrt firmware

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      target:
        description: 'Target platform'
        required: true
        default: 'x86'

jobs:
  build:
    strategy:
      matrix:
        target: ['x86', 'r2s', 'jcg', 'ea0326gmp']
    runs-on: ubuntu-latest

    steps:
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget qemu-utils
        sudo apt install python2
        
    - name: Checkout source code
      uses: actions/checkout@v2
      with:
        submodules: true
        repository: liudf0716/openwrt
        ref: chawrt/main

    - name: Setup .config based on input
      run: |
        cp ${{ matrix.target }}.config .config
        make oldconfig

    - name: Update and install feeds
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Compile firmware
      run: make -j8

    - name: Create output directory
      run: mkdir output

    - name: Copy combined files (x86)
      if: matrix.target == 'x86'
      run: |
        cp bin/targets/x86/64/*combined.* output/

    - name: Copy sysupgrade files (r2s)
      if: matrix.target == 'r2s'
      run: |
        mkdir output
        cp bin/targets/rockchip/armv8/*-r2s-ext4-sysupgrade.img.gz output/
    
    - name: Copy sysupgrade files (jcg)
      if: matrix.target == 'jcg'
      run: |
        mkdir output
        cp bin/targets/mediatek/filogic/*.itb output/
        cp bin/targets/mediatek/filogic/*.bin output/
        cp bin/targets/mediatek/filogic/*.fip output/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ matrix.target }}
        path: output/

  release:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ['x86', 'r2s', 'jcg', 'ea0326gmp']
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: firmware-${{ matrix.target }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}-${{ matrix.target }}
        release_name: Release ${{ github.run_number }}-${{ matrix.target }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./firmware-${{ matrix.target }}/*
        asset_name: firmware-${{ matrix.target }}.zip
        asset_content_type: application/zip