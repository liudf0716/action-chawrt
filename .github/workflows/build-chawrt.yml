name: Compile chawrt firmware

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      target:
        description: 'Target platform'
        required: true
        default: 'x86'
        type: choice
        options:
          - x86
          - r2s
          - jcg
          - ea0326gmp

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Remove unnecessary directories to free up space
      run: |
        sudo rm -rf /usr/local/.ghcup
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /usr/local/lib/android/sdk/ndk
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo apt-get clean
        echo "Disk space cleaned up"
        df -h

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget qemu-utils
        sudo apt install python3 python3-pip
        pip3 install pyelftools
        
    - name: Checkout source code
      uses: actions/checkout@v2
      with:
        submodules: true
        repository: liudf0716/openwrt
        ref: chawrt/main
    
    - name: Cache dl directory
      id: cache-dl
      uses: actions/cache@v3
      with:
        path: dl
        key: ${{ runner.os }}-openwrt-dl-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-openwrt-dl-

    - name: Cache build directory
      id: cache-build-dir
      uses: actions/cache@v3
      with:
        path: build_dir
        key: ${{ runner.os }}-openwrt-build_dir-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-openwrt-build_dir-

    - name: Cache staging directory
      id: cache-staging-dir
      uses: actions/cache@v3
      with:
        path: staging_dir
        key: ${{ runner.os }}-openwrt-staging_dir-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-openwrt-staging_dir-

    - name: Update and install feeds
      run: |
        git branch
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Setup .config based on input
      run: |
        cp ${{ github.event.inputs.target }}.config .config
        diff ${{ github.event.inputs.target }}.config .config
        make oldconfig

    - name: Compile firmware
      run: make -j$(nproc) || make -j1 V=s

    - name: Create output directory
      run: mkdir output

    - name: Copy combined files (x86)
      if: ${{ github.event.inputs.target }} == 'x86'
      run: |
        cp bin/targets/x86/64/*combined.* output/ || echo "No combined files found"

    - name: Copy sysupgrade files (r2s)
      if: ${{ github.event.inputs.target }} == 'r2s'
      run: |
        cp bin/targets/rockchip/armv8/*-r2s-ext4-sysupgrade.img.gz output/ || echo "No sysupgrade files found"
    
    - name: Copy sysupgrade files (jcg)
      if: ${{ github.event.inputs.target }} == 'jcg'
      run: |
        cp bin/targets/ramips/mt7621/*-jcg_q20-squashfs-sysupgrade.bin output/ || echo "No sysupgrade files found"
        cp bin/targets/ramips/mt7621/*-jcg_q20-squashfs-factory.bin output/ || echo "No factory files found"

    - name: Copy files for ea0326gmp
      if: ${{ github.event.inputs.target }} == 'ea0326gmp'
      run: |
        cp bin/targets/mediatek/filogic/*.itb output/ || echo "No sysupgrade files found"
        cp bin/targets/mediatek/filogic/*.bin output/ || echo "No sysupgrade files found"
        cp bin/targets/mediatek/filogic/*.fip output/ || echo "No sysupgrade files found"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ github.event.inputs.target }}
        path: output/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: firmware-${{ github.event.inputs.target }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}-${{ github.event.inputs.target }}
        release_name: Release ${{ github.run_number }}-${{ github.event.inputs.target }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./firmware-${{ github.event.inputs.target }}/*
        asset_name: firmware-${{ github.event.inputs.target }}.zip
        asset_content_type: application/zip
